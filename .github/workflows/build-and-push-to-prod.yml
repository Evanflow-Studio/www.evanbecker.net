name: Build & Deploy Test

on:
  push:
    branches: [ "release" ]
  pull_request: #Uncomment this for testing purposes
    branches: [ "release" ]

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2
        
      - name: Create env files
        run: |
          touch ./evanbecker-client/.env.local
          echo "Client Build Variables"
          echo -e "NEXT_PUBLIC_SITE_URL=${{ secrets.Prod_Client_NEXT_PUBLIC_SITE_URL }}" >> ./evanbecker-client/.env.local
          echo -e "NEXT_PUBLIC_API_URL=${{ secrets.Prod_Client_NEXT_PUBLIC_API_URL }}" >> ./evanbecker-client/.env.local
          echo -e "NEXT_PUBLIC_AUTH0_DOMAIN=${{ secrets.Prod_Client_NEXT_PUBLIC_AUTH0_DOMAIN }}" >> ./evanbecker-client/.env.local
          echo -e "NEXT_PUBLIC_AUTH0_CLIENT_ID=${{ secrets.Prod_Client_NEXT_PUBLIC_AUTH0_CLIENT_ID }}" >> ./evanbecker-client/.env.local
          echo -e "NEXT_PUBLIC_AUTH0_AUDIENCE=${{ secrets.Prod_Client_NEXT_PUBLIC_AUTH0_AUDIENCE }}" >> ./evanbecker-client/.env.local
          echo -e "NEXT_PUBLIC_AUTH0_REDIRECT_URI=${{ secrets.Prod_Client_NEXT_PUBLIC_AUTH0_REDIRECT_URI }}" >> ./evanbecker-client/.env.local

      - name: Update Docker settings
        run: |
          sudo sed -i 's/ }/, \"max-concurrent-uploads\": 2 }/' /etc/docker/daemon.json
          sudo systemctl restart docker

      - name: Build image
        run: docker compose -f docker-compose.prod.yaml build --no-cache
        
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          
      - name: Log in to DO Container Registry
        run: doctl registry login
        
      - name: Push image to DO Container Registry
        run: docker compose -f docker-compose.prod.yaml push

      - name: Run Entity Framework Migrations
        run: |
          echo "Creating appsettings.secrets.json..."
          [ ! -e ./evanbecker-api/evanbecker-api/secrets/appsettings.secrets.json ] || rm ./evanbecker-api/evanbecker-api/secrets/appsettings.secrets.json
          mkdir ./evanbecker-api/evanbecker-api/secrets/
          chmod 777 ./evanbecker-api/evanbecker-api/secrets/
          touch ./evanbecker-api/evanbecker-api/secrets/appsettings.secrets.json
          echo -e "{\n\t\"ConnectionStrings\": {\n\t\t\"Database\": \"Host=db.evanbecker.net;Username=${{ secrets.Prod_DB_USER }};Password=${{ secrets.Prod_DB_PASSWORD }};Database=${{ secrets.Prod_DB_DATABASE }}\"\n\t}\n}" >> ./evanbecker-api/evanbecker-api/secrets/appsettings.secrets.json
          pwd
          cat ./evanbecker-api/evanbecker-api/secrets/appsettings.secrets.json
          echo "Ensuring dotnet-ef is installed..."
          dotnet tool install --global dotnet-ef
          dotnet tool restore
          cd ./evanbecker-api/evanbecker-domain/
          echo "Updating Database..."
          dotnet ef database update
        
      - name: Deploy Stack
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.GL_SSH_HOST }}
          username: ${{ secrets.GL_SSH_USERNAME }}
          passphrase: ${{ secrets.GL_SSH_PASSPHRASE }}
          key: ${{ secrets.GL_SSH_SECRET }}
          port: 22
          script: |
            echo "Starting Prod Deploy:"
            cd ~/www.evanbecker.net/www.evanbecker.net/deploy/
            echo "Refreshing Secrets..."
            echo "> Deleting previous .env"
            [ ! -e .env ] || rm .env
            echo "> Creating new .env"
            touch .env

            echo "> Appending API Secrets"
            echo -e "Prod_API_Auth0_Domain=${{ secrets.Prod_API_Auth0_Domain }}" >> .env
            echo -e "Prod_API_GitHub_PAT=${{ secrets.Prod_API_GitHub_PAT }}" >> .env
            echo -e "Prod_API_Auth0_Audience=${{ secrets.Prod_API_Auth0_Audience }}" >> .env
            echo -e "Prod_API_Auth0_ClientId=${{ secrets.Prod_API_Auth0_ClientId }}" >> .env
            echo -e "Prod_API_Auth0_ClientSecret=${{ secrets.Prod_API_Auth0_ClientSecret }}" >> .env
            echo -e "Prod_API_Auth0_Url=${{ secrets.Prod_API_Auth0_Url }}" >> .env
            echo -e "ReCaptcha_Secret=${{ secrets.ReCaptcha_Secret }}" >> .env
            echo -e "CONNECTION_STRING=Host=${{ secrets.Prod_DB_DATABASE }};Username=${{ secrets.Prod_DB_USER }};Password=${{ secrets.Prod_DB_PASSWORD }};Database=${{ secrets.Prod_DB_DATABASE }}" >> .env

            echo "> Appending DB Secrets"
            echo -e "Prod_DB_DATABASE=${{ secrets.Prod_DB_DATABASE }}" >> .env
            echo -e "Prod_DB_USER=${{ secrets.Prod_DB_USER }}" >> .env
            echo -e "Prod_DB_PASSWORD=${{ secrets.Prod_DB_PASSWORD }}" >> .env

            echo "> Appending PG Admin Secrets"
            echo -e "Prod_DB_PGADMIN_USER=${{ secrets.Prod_DB_PGADMIN_USER }}" >> .env
            echo -e "Prod_DB_PGADMIN_PASSWORD=${{ secrets.Prod_DB_PGADMIN_PASSWORD }}" >> .env

            echo -"ENVIRONMENT=prod" >> .env            

            echo "> Secrets Refreshed..."

            echo "Logging into doctl registry..."
            doctl registry login

            echo "Pulling latest changes..."
            git pull

            echo "Starting docker-compose..."
            docker compose -f docker-compose.prod.yaml up -d --build